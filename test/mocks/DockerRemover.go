// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	docker "github.com/funlessdev/fl-cli/pkg/docker"

	mock "github.com/stretchr/testify/mock"
)

// DockerRemover is an autogenerated mock type for the DockerRemover type
type DockerRemover struct {
	mock.Mock
}

// RemoveCoreContainer provides a mock function with given fields: ctx
func (_m *DockerRemover) RemoveCoreContainer(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFLNetwork provides a mock function with given fields: ctx
func (_m *DockerRemover) RemoveFLNetwork(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePromContainer provides a mock function with given fields: ctx
func (_m *DockerRemover) RemovePromContainer(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveWorkerContainer provides a mock function with given fields: ctx
func (_m *DockerRemover) RemoveWorkerContainer(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithDockerClient provides a mock function with given fields: cli
func (_m *DockerRemover) WithDockerClient(cli docker.DockerClient) {
	_m.Called(cli)
}

type mockConstructorTestingTNewDockerRemover interface {
	mock.TestingT
	Cleanup(func())
}

// NewDockerRemover creates a new instance of DockerRemover. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDockerRemover(t mockConstructorTestingTNewDockerRemover) *DockerRemover {
	mock := &DockerRemover{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
