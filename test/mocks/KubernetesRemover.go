// Copyright 2022 Giuseppe De Palma, Matteo Trentin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// KubernetesRemover is an autogenerated mock type for the KubernetesRemover type
type KubernetesRemover struct {
	mock.Mock
}

// RemoveNamespace provides a mock function with given fields: ctx
func (_m *KubernetesRemover) RemoveNamespace(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithConfig provides a mock function with given fields: config
func (_m *KubernetesRemover) WithConfig(config string) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKubernetesRemover interface {
	mock.TestingT
	Cleanup(func())
}

// NewKubernetesRemover creates a new instance of KubernetesRemover. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKubernetesRemover(t mockConstructorTestingTNewKubernetesRemover) *KubernetesRemover {
	mock := &KubernetesRemover{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
