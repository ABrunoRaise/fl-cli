// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	pkg "github.com/funlessdev/fl-cli/pkg"
	mock "github.com/stretchr/testify/mock"
)

// ModHandler is an autogenerated mock type for the ModHandler type
type ModHandler struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, modName
func (_m *ModHandler) Create(ctx context.Context, modName string) error {
	ret := _m.Called(ctx, modName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, modName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, modName
func (_m *ModHandler) Delete(ctx context.Context, modName string) error {
	ret := _m.Called(ctx, modName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, modName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, modName
func (_m *ModHandler) Get(ctx context.Context, modName string) (pkg.SingleModule, error) {
	ret := _m.Called(ctx, modName)

	var r0 pkg.SingleModule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pkg.SingleModule, error)); ok {
		return rf(ctx, modName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pkg.SingleModule); ok {
		r0 = rf(ctx, modName)
	} else {
		r0 = ret.Get(0).(pkg.SingleModule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, modName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *ModHandler) List(ctx context.Context) (pkg.ModuleNameList, error) {
	ret := _m.Called(ctx)

	var r0 pkg.ModuleNameList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pkg.ModuleNameList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pkg.ModuleNameList); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(pkg.ModuleNameList)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, modName, newName
func (_m *ModHandler) Update(ctx context.Context, modName string, newName string) error {
	ret := _m.Called(ctx, modName, newName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, modName, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewModHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewModHandler creates a new instance of ModHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewModHandler(t mockConstructorTestingTNewModHandler) *ModHandler {
	mock := &ModHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
