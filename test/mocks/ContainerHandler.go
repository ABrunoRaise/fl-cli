// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/docker/docker/client"

	docker "github.com/funlessdev/fl-cli/pkg/docker"

	mock "github.com/stretchr/testify/mock"
)

// ContainerHandler is an autogenerated mock type for the ContainerHandler type
type ContainerHandler struct {
	mock.Mock
}

// Exists provides a mock function with given fields: ctx, dockerClient, containerName
func (_m *ContainerHandler) Exists(ctx context.Context, dockerClient *client.Client, containerName string) (bool, string, error) {
	ret := _m.Called(ctx, dockerClient, containerName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *client.Client, string) bool); ok {
		r0 = rf(ctx, dockerClient, containerName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, *client.Client, string) string); ok {
		r1 = rf(ctx, dockerClient, containerName)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *client.Client, string) error); ok {
		r2 = rf(ctx, dockerClient, containerName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Remove provides a mock function with given fields: ctx, dockerClient, containerID
func (_m *ContainerHandler) Remove(ctx context.Context, dockerClient *client.Client, containerID string) error {
	ret := _m.Called(ctx, dockerClient, containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.Client, string) error); ok {
		r0 = rf(ctx, dockerClient, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunAndWait provides a mock function with given fields: ctx, dockerClient, conf
func (_m *ContainerHandler) RunAndWait(ctx context.Context, dockerClient *client.Client, conf docker.ContainerConfigs) error {
	ret := _m.Called(ctx, dockerClient, conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.Client, docker.ContainerConfigs) error); ok {
		r0 = rf(ctx, dockerClient, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunAsync provides a mock function with given fields: ctx, dockerClient, conf
func (_m *ContainerHandler) RunAsync(ctx context.Context, dockerClient *client.Client, conf docker.ContainerConfigs) error {
	ret := _m.Called(ctx, dockerClient, conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.Client, docker.ContainerConfigs) error); ok {
		r0 = rf(ctx, dockerClient, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewContainerHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewContainerHandler creates a new instance of ContainerHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContainerHandler(t mockConstructorTestingTNewContainerHandler) *ContainerHandler {
	mock := &ContainerHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
