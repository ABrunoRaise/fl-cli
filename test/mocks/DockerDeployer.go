// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DockerDeployer is an autogenerated mock type for the DockerDeployer type
type DockerDeployer struct {
	mock.Mock
}

// PullCoreImage provides a mock function with given fields: ctx
func (_m *DockerDeployer) PullCoreImage(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PullWorkerImage provides a mock function with given fields: ctx
func (_m *DockerDeployer) PullWorkerImage(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupClient provides a mock function with given fields: ctx
func (_m *DockerDeployer) SetupClient(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupFLNetworks provides a mock function with given fields: ctx
func (_m *DockerDeployer) SetupFLNetworks(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartCore provides a mock function with given fields: ctx
func (_m *DockerDeployer) StartCore(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartWorker provides a mock function with given fields: ctx
func (_m *DockerDeployer) StartWorker(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDockerDeployer interface {
	mock.TestingT
	Cleanup(func())
}

// NewDockerDeployer creates a new instance of DockerDeployer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDockerDeployer(t mockConstructorTestingTNewDockerDeployer) *DockerDeployer {
	mock := &DockerDeployer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
