// Copyright 2022 Giuseppe De Palma, Matteo Trentin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DockerDeployer is an autogenerated mock type for the DockerDeployer type
type DockerDeployer struct {
	mock.Mock
}

// CreateFLNetworks provides a mock function with given fields: ctx
func (_m *DockerDeployer) CreateFLNetworks(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PullCoreImage provides a mock function with given fields: ctx
func (_m *DockerDeployer) PullCoreImage(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PullWorkerImage provides a mock function with given fields: ctx
func (_m *DockerDeployer) PullWorkerImage(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveCoreContainer provides a mock function with given fields: ctx
func (_m *DockerDeployer) RemoveCoreContainer(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFLNetworks provides a mock function with given fields: ctx
func (_m *DockerDeployer) RemoveFLNetworks(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFunctionContainers provides a mock function with given fields: ctx
func (_m *DockerDeployer) RemoveFunctionContainers(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveWorkerContainer provides a mock function with given fields: ctx
func (_m *DockerDeployer) RemoveWorkerContainer(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Setup provides a mock function with given fields: ctx, coreImg, workerImg
func (_m *DockerDeployer) Setup(ctx context.Context, coreImg string, workerImg string) error {
	ret := _m.Called(ctx, coreImg, workerImg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, coreImg, workerImg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartCore provides a mock function with given fields: ctx
func (_m *DockerDeployer) StartCore(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartWorker provides a mock function with given fields: ctx
func (_m *DockerDeployer) StartWorker(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDockerDeployer interface {
	mock.TestingT
	Cleanup(func())
}

// NewDockerDeployer creates a new instance of DockerDeployer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDockerDeployer(t mockConstructorTestingTNewDockerDeployer) *DockerDeployer {
	mock := &DockerDeployer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
