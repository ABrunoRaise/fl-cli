// Copyright 2022 Giuseppe De Palma, Matteo Trentin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	openapi "github.com/funlessdev/fl-client-sdk-go"
	mock "github.com/stretchr/testify/mock"

	os "os"
)

// FnHandler is an autogenerated mock type for the FnHandler type
type FnHandler struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, fnName, fnMod, code
func (_m *FnHandler) Create(ctx context.Context, fnName string, fnMod string, code *os.File) error {
	ret := _m.Called(ctx, fnName, fnMod, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *os.File) error); ok {
		r0 = rf(ctx, fnName, fnMod, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, fnName, fnMod
func (_m *FnHandler) Delete(ctx context.Context, fnName string, fnMod string) error {
	ret := _m.Called(ctx, fnName, fnMod)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, fnName, fnMod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoke provides a mock function with given fields: ctx, fnName, fnMod, fnArgs
func (_m *FnHandler) Invoke(ctx context.Context, fnName string, fnMod string, fnArgs map[string]interface{}) (openapi.InvokeResult, error) {
	ret := _m.Called(ctx, fnName, fnMod, fnArgs)

	var r0 openapi.InvokeResult
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) openapi.InvokeResult); ok {
		r0 = rf(ctx, fnName, fnMod, fnArgs)
	} else {
		r0 = ret.Get(0).(openapi.InvokeResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, fnName, fnMod, fnArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, fnName, fnMod, code, newName
func (_m *FnHandler) Update(ctx context.Context, fnName string, fnMod string, code *os.File, newName string) error {
	ret := _m.Called(ctx, fnName, fnMod, code, newName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *os.File, string) error); ok {
		r0 = rf(ctx, fnName, fnMod, code, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFnHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewFnHandler creates a new instance of FnHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFnHandler(t mockConstructorTestingTNewFnHandler) *FnHandler {
	mock := &FnHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
