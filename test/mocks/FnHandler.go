// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"
	os "os"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/funlessdev/fl-cli/pkg"
)

// FnHandler is an autogenerated mock type for the FnHandler type
type FnHandler struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, fnName, fnMod, code
func (_m *FnHandler) Create(ctx context.Context, fnName string, fnMod string, code *os.File) error {
	ret := _m.Called(ctx, fnName, fnMod, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *os.File) error); ok {
		r0 = rf(ctx, fnName, fnMod, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, fnName, fnMod
func (_m *FnHandler) Delete(ctx context.Context, fnName string, fnMod string) error {
	ret := _m.Called(ctx, fnName, fnMod)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, fnName, fnMod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoke provides a mock function with given fields: ctx, fnName, fnMod, fnArgs
func (_m *FnHandler) Invoke(ctx context.Context, fnName string, fnMod string, fnArgs map[string]interface{}) (pkg.IvkResult, error) {
	ret := _m.Called(ctx, fnName, fnMod, fnArgs)

	var r0 pkg.IvkResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) (pkg.IvkResult, error)); ok {
		return rf(ctx, fnName, fnMod, fnArgs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) pkg.IvkResult); ok {
		r0 = rf(ctx, fnName, fnMod, fnArgs)
	} else {
		r0 = ret.Get(0).(pkg.IvkResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, fnName, fnMod, fnArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, fnName, fnMod, code, newName
func (_m *FnHandler) Update(ctx context.Context, fnName string, fnMod string, code *os.File, newName string) error {
	ret := _m.Called(ctx, fnName, fnMod, code, newName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *os.File, string) error); ok {
		r0 = rf(ctx, fnName, fnMod, code, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFnHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewFnHandler creates a new instance of FnHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFnHandler(t mockConstructorTestingTNewFnHandler) *FnHandler {
	mock := &FnHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
