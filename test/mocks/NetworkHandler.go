// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/docker/docker/client"

	mock "github.com/stretchr/testify/mock"
)

// NetworkHandler is an autogenerated mock type for the NetworkHandler type
type NetworkHandler struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, dockerClient, networkName
func (_m *NetworkHandler) Create(ctx context.Context, dockerClient *client.Client, networkName string) (string, error) {
	ret := _m.Called(ctx, dockerClient, networkName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *client.Client, string) string); ok {
		r0 = rf(ctx, dockerClient, networkName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *client.Client, string) error); ok {
		r1 = rf(ctx, dockerClient, networkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: ctx, dockerClient, networkName
func (_m *NetworkHandler) Exists(ctx context.Context, dockerClient *client.Client, networkName string) (bool, string, error) {
	ret := _m.Called(ctx, dockerClient, networkName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *client.Client, string) bool); ok {
		r0 = rf(ctx, dockerClient, networkName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, *client.Client, string) string); ok {
		r1 = rf(ctx, dockerClient, networkName)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *client.Client, string) error); ok {
		r2 = rf(ctx, dockerClient, networkName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Remove provides a mock function with given fields: ctx, dockerClient, networkID
func (_m *NetworkHandler) Remove(ctx context.Context, dockerClient *client.Client, networkID string) error {
	ret := _m.Called(ctx, dockerClient, networkID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.Client, string) error); ok {
		r0 = rf(ctx, dockerClient, networkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNetworkHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewNetworkHandler creates a new instance of NetworkHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNetworkHandler(t mockConstructorTestingTNewNetworkHandler) *NetworkHandler {
	mock := &NetworkHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
