// Copyright 2023 Giuseppe De Palma, Matteo Trentin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	pkg "github.com/funlessdev/fl-cli/pkg"
	mock "github.com/stretchr/testify/mock"
)

// UserHandler is an autogenerated mock type for the UserHandler type
type UserHandler struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, name
func (_m *UserHandler) Create(ctx context.Context, name string) (pkg.UserNameToken, error) {
	ret := _m.Called(ctx, name)

	var r0 pkg.UserNameToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pkg.UserNameToken, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pkg.UserNameToken); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(pkg.UserNameToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *UserHandler) List(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserHandler creates a new instance of UserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserHandler(t mockConstructorTestingTNewUserHandler) *UserHandler {
	mock := &UserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
