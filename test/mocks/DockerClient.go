// Copyright 2022 Giuseppe De Palma, Matteo Trentin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	docker "github.com/funlessdev/fl-cli/pkg/docker"
	mock "github.com/stretchr/testify/mock"
)

// DockerClient is an autogenerated mock type for the DockerClient type
type DockerClient struct {
	mock.Mock
}

// CreateNetwork provides a mock function with given fields: ctx, networkName
func (_m *DockerClient) CreateNetwork(ctx context.Context, networkName string) (string, error) {
	ret := _m.Called(ctx, networkName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, networkName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, networkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CtrExists provides a mock function with given fields: ctx, containerName
func (_m *DockerClient) CtrExists(ctx context.Context, containerName string) (bool, string, error) {
	ret := _m.Called(ctx, containerName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, containerName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, containerName)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, containerName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ImageExists provides a mock function with given fields: ctx, image
func (_m *DockerClient) ImageExists(ctx context.Context, image string) (bool, error) {
	ret := _m.Called(ctx, image)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, image)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkExists provides a mock function with given fields: ctx, networkName
func (_m *DockerClient) NetworkExists(ctx context.Context, networkName string) (bool, string, error) {
	ret := _m.Called(ctx, networkName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, networkName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, networkName)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, networkName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Pull provides a mock function with given fields: ctx, image
func (_m *DockerClient) Pull(ctx context.Context, image string) error {
	ret := _m.Called(ctx, image)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveCtr provides a mock function with given fields: ctx, containerID
func (_m *DockerClient) RemoveCtr(ctx context.Context, containerID string) error {
	ret := _m.Called(ctx, containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveNetwork provides a mock function with given fields: ctx, networkID
func (_m *DockerClient) RemoveNetwork(ctx context.Context, networkID string) error {
	ret := _m.Called(ctx, networkID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, networkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunAndWait provides a mock function with given fields: ctx, conf
func (_m *DockerClient) RunAndWait(ctx context.Context, conf docker.ContainerConfigs) error {
	ret := _m.Called(ctx, conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, docker.ContainerConfigs) error); ok {
		r0 = rf(ctx, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunAsync provides a mock function with given fields: ctx, conf
func (_m *DockerClient) RunAsync(ctx context.Context, conf docker.ContainerConfigs) error {
	ret := _m.Called(ctx, conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, docker.ContainerConfigs) error); ok {
		r0 = rf(ctx, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDockerClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDockerClient creates a new instance of DockerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDockerClient(t mockConstructorTestingTNewDockerClient) *DockerClient {
	mock := &DockerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
